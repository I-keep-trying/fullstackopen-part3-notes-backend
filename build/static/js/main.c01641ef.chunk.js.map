{"version":3,"sources":["note-icon.png","components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["module","exports","Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","console","log","put","Notification","message","App","props","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","src","logo","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","e","preventDefault","noteObject","Date","toISOString","Math","random","length","placeholder","value","onChange","event","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c01641ef.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/note-icon.c0078032.png\";","import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n  const label = note.important ? 'make not important' : 'make important'\n\n  return (\n    <li className={note.important ? 'note-important' : 'note'}>\n      {note.content}\n      <button onClick={toggleImportance}>{label}</button>\n    </li>\n  )\n}\n\nexport default Note\n","import axios from 'axios'\nconst baseUrl = 'https://guarded-ravine-22773.herokuapp.com/api/notes'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  const nonExisting = {\n    id: 10000,\n    content: 'This note is not saved to server',\n    date: '2019-05-30T17:30:31.098Z',\n    important: true,\n  }\n  return request.then((response) => response.data.concat(nonExisting))\n}\n\nconst create = (newObject) => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then((response) => response.data)\n}\n\nconst update = (newObject) => {\n  console.log('newObject', newObject)\n  const request = axios.put(`${baseUrl}/${newObject.id}`, newObject)\n  return request.then((response) => response.data)\n}\n\nexport default {\n  getAll,\n  create,\n  update,\n}\n","import React from 'react'\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return <div className=\"error\">{message}</div>\n}\n\nexport default Notification\n","import React, { useState, useEffect } from 'react'\r\nimport Note from './components/Note'\r\nimport noteService from './services/notes'\r\nimport Notification from './components/Notification'\r\nimport logo from './note-icon.png'\r\nimport './App.css'\r\n\r\nconst App = (props) => {\r\n  const [notes, setNotes] = useState([])\r\n  const [newNote, setNewNote] = useState('')\r\n  const [showAll, setShowAll] = useState(true)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then((initialNotes) => {\r\n      setNotes(initialNotes)\r\n    })\r\n  }, [])\r\n\r\n  const addNote = (e) => {\r\n    e.preventDefault()\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() < 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n    noteService.create(noteObject).then((returnedNote) => {\r\n      setNotes(notes.concat(returnedNote))\r\n      setNewNote('')\r\n    })\r\n  }\r\n\r\n  const handleNoteChange = (event) => {\r\n    setNewNote(event.target.value)\r\n  }\r\n\r\n  const notesToShow = showAll\r\n    ? notes\r\n    : notes.filter((note) => note.important === true)\r\n\r\n  const toggleImportanceOf = (id) => {\r\n    const note = notes.find((n) => n.id === id)\r\n    const changedNote = { ...note, important: !note.important }\r\n    noteService\r\n      .update(changedNote)\r\n      .then((returnedNote) => {\r\n        setNotes(notes.map((note) => (note.id !== id ? note : returnedNote)))\r\n      })\r\n      .catch((error) => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        )\r\n        setTimeout(() => {\r\n          setErrorMessage(null)\r\n        }, 5000)\r\n        setNotes(notes.filter((n) => n.id !== id))\r\n      })\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      \r\n      <h1 className=\"App-header\">\r\n      <img src={logo} className=\"App-logo\" />\r\n        Notes</h1>\r\n      <div className=\"AppBody\">\r\n        <div>\r\n          <Notification message={errorMessage} />\r\n          <button onClick={() => setShowAll(!showAll)}>\r\n            show {showAll ? 'important' : 'all'}\r\n          </button>\r\n        </div>\r\n        <ul>\r\n          <div>\r\n            Key: <strong>important</strong> | not important\r\n          </div>\r\n          <br />\r\n          <div>\r\n            {notesToShow.map((note) => (\r\n              <Note\r\n                key={note.id}\r\n                note={note}\r\n                toggleImportance={() => toggleImportanceOf(note.id)}\r\n              />\r\n            ))}\r\n          </div>\r\n        </ul>\r\n        <form onSubmit={addNote}>\r\n          <input\r\n            placeholder=\"a new note...\"\r\n            value={newNote}\r\n            onChange={handleNoteChange}\r\n          />\r\n          <button type=\"submit\">save</button>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport './index.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}